data_test_norm <- data.frame(t(apply(data.test, 1, normalize))) #min max between 0-1
data_test_norm[is.na(data_test_norm)] <- 0
# make list for ML
data_train_list <- list(data_train_none, data_train_norm)
data_test_list <- list(data_test_none, data_test_norm)
norm_names <- c("none", "min.max_norm")
data.traink <- data_train_list[[f]]
train_class <- make.names(train_class)
data_run1 <- data.frame(t(data.traink), condition=train_class)
data_test1 <- data_test_list[[f]]
test_class <- make.names(test_class)
data_test1 <- data.frame(t(data_test1), condition=test_class)
mod_test <- readRDS(av_models[[j]])
if(grepl("lasso", model_list[[i]])){
preds1 <- data.frame(X1=predict(mod_test, newdata = data_test1))
} else {
preds1 <- predict(mod_test, newdata = data_test1, type = 'prob')
}
#preds1$obs <- predict(mod_test, newdata = data_test1)
preds1$true <- data_test1$condition
sscurves <- evalmod(scores = preds1$X1, labels = preds1$true)
aucs <- round(auc(sscurves)$aucs,4)
obs <- preds1$X1
obs[obs>0.5]<- "X1"
obs[obs<0.5]<- "X0"
cf <- confusionMatrix(data = factor(obs, levels=c("X0","X1")),
reference = as.factor(data_test1$condition),
mode = "prec_recall")
c_mat <- c(truePos=cf$table[1,1], falsePos=cf$table[2,1],
falseNeg=cf$table[1,2], trueNeg=cf$table[2,2])
accuracies <- c(cf$overall[1], cf$byClass[1], cf$byClass[2],
cf$byClass[5], cf$byClass[6], cf$byClass[11])
names(accuracies)[1] <- "TestAccuracy"
names(accuracies)[6] <- "BalancedAccuracy"
ssfort <- fortify(sscurves)
ssfort$AUC <- c(rep(aucs[1], length(which(ssfort$curvetype=="ROC")==T)), rep(aucs[2], length(which(ssfort$curvetype=="PRC")==T)))
ssfort$model <- rep(basename(model_list[[i]]), nrow(ssfort))
basis <- gsub(".txt", "",sig_matrix[[j]])
ssfort$Basis <- rep(gsub("_basis", "", basis), nrow(ssfort))
ssfort_total <- rbind(ssfort_total, ssfort)
curr_model <- gsub(".rds", "",basename(model_list[[i]]))
auc_adder <- cbind(data.frame(Model = curr_model, Basis = basis), t(c_mat), t(accuracies),
data.frame(TestROC_AUC = aucs[1], TestPR_AUC = aucs[2]))
all_auc <- rbind(all_auc, auc_adder)
}
}
ssfort_total <- ssfort_total[-1,]
all_auc <- all_auc[-1,]
View(all_auc)
year <- gsub("yrs.*", "", ssfort_total$model)
ssfort_total$Year <- sub(".*_", "", year)
modtype1  <- gsub("10_(.+)yrs.*", "10_", ssfort_total$model)
modtype1  <- gsub("7_(.+)yrs.*", "7_", modtype1)
modtype1  <- gsub("5_(.+)yrs.*", "5_", modtype1)
modtype1  <- gsub("3_(.+)yrs.*", "3_", modtype1)
modtype2  <- gsub(".*yrs_", "", ssfort_total$model)
ssfort_total$modType <- paste0(modtype1, modtype2)
all_list <- list()
counter = 1
uniqs <- unique(ssfort_total$modType)
### clean figure just curated 3 diff years
curr3 <- subset(ssfort_total, Basis == "curated12")
curr3$Year <- factor(curr3$Year, levels = c(2,5,10))
auc_2 <- subset(curr3, Year == 2 & curvetype == "ROC")$AUC[1]
auc_5 <- subset(curr3, Year == 5 & curvetype == "ROC")$AUC[1]
auc_10 <- subset(curr3, Year == 10 & curvetype == "ROC")$AUC[1]
View(curr3)
### clean figure just curated 3 diff years ###3 4.18 update only 2 and 5 year models
curr3 <- subset(ssfort_total, Basis == "curated12")
#curr3$Year <- factor(curr3$Year, levels = c(2,5,10))
curr3$Year <- factor(curr3$Year, levels = c(2,5))
auc_2 <- subset(curr3, Year == 2 & curvetype == "ROC")$AUC[1]
auc_5 <- subset(curr3, Year == 5 & curvetype == "ROC")$AUC[1]
gROC <- ggplot(subset(curr3, curvetype=="ROC"), aes(x=x, y=y, linetype = Year)) +
geom_line() + scale_linetype_manual(values = c("solid", "longdash", "dotted"))+
annotate("text", 0.75, 0.55, label = auc_2) +
annotate("text", 0.75, 0.5, label = auc_5) +
annotate("text", 0.75, 0.45, label = auc_10) +
ggtitle("Lasso Model\n7-fold Cross Validation\nMin-Max Normalization")
gROC
gROC <- ggplot(subset(curr3, curvetype=="ROC"), aes(x=x, y=y, linetype = Year)) +
geom_line() + scale_linetype_manual(values = c("solid", "longdash", "dotted"))+
annotate("text", 0.75, 0.55, label = auc_2) +
annotate("text", 0.75, 0.5, label = auc_5) +
#annotate("text", 0.75, 0.45, label = auc_10) +
ggtitle("Lasso Model\n7-fold Cross Validation\nMin-Max Normalization")
gROC
curr3 <- subset(ssfort_total, Basis == "curated12")
#curr3$Year <- factor(curr3$Year, levels = c(2,5,10))
curr3$Year <- factor(curr3$Year, levels = c(2,5))
auc_2 <- subset(curr3, Year == 2 & curvetype == "ROC")$AUC[1]
auc_5 <- subset(curr3, Year == 5 & curvetype == "ROC")$AUC[1]
#auc
curr3$Year
### clean figure just curated 3 diff years ###3 4.18 update only 2 and 5 year models
curr3 <- subset(ssfort_total, Basis == "curated12")
### clean figure just curated 3 diff years ###3 4.18 update only 2 and 5 year models
curr3 <- subset(ssfort_total, Basis == "curated12" & Year %in% c(2,5))
#curr3$Year <- factor(curr3$Year, levels = c(2,5,10))
curr3$Year <- factor(curr3$Year, levels = c(2,5))
auc_2 <- subset(curr3, Year == 2 & curvetype == "ROC")$AUC[1]
auc_5 <- subset(curr3, Year == 5 & curvetype == "ROC")$AUC[1]
gROC <- ggplot(subset(curr3, curvetype=="ROC"), aes(x=x, y=y, linetype = Year)) +
geom_line() + scale_linetype_manual(values = c("solid", "longdash", "dotted"))+
annotate("text", 0.75, 0.55, label = auc_2) +
annotate("text", 0.75, 0.5, label = auc_5) +
#annotate("text", 0.75, 0.45, label = auc_10) +
ggtitle("Lasso Model\n7-fold Cross Validation\nMin-Max Normalization")
gROC
curr3 <- subset(ssfort_total, Basis == "curated12")
#curr3$Year <- factor(curr3$Year, levels = c(2,5,10))
curr4 <- subset(curr3, Year %in% c(2,5))
curr4$Year <- factor(curr4$Year, levels = c(2,5))
auc_2 <- subset(curr4, Year == 2 & curvetype == "ROC")$AUC[1]
auc_5 <- subset(curr4, Year == 5 & curvetype == "ROC")$AUC[1]
#auc_10 <- subset(curr3, Year == 10 & curvetype == "ROC")$AUC[1]
gROC <- ggplot(subset(curr4, curvetype=="ROC"), aes(x=x, y=y, linetype = Year)) +
geom_line() + scale_linetype_manual(values = c("solid", "longdash", "dotted"))+
annotate("text", 0.75, 0.55, label = auc_2) +
annotate("text", 0.75, 0.5, label = auc_5) +
#annotate("text", 0.75, 0.45, label = auc_10) +
ggtitle("Lasso Model\n7-fold Cross Validation\nMin-Max Normalization")
gROC
getwd()
auc_2 <- subset(curr4, Year == 2 & curvetype == "PRC")$AUC[1]
auc_5 <- subset(curr4, Year == 5 & curvetype == "PRC")$AUC[1]
#auc_10 <- subset(curr3, Year == 10 & curvetype == "PRC")$AUC[1]
gPRC <- ggplot(subset(curr4, curvetype=="PRC"), aes(x=x, y=y, linetype = Year)) +
geom_line() + scale_linetype_manual(values = c("solid", "longdash", "dotted"))+
annotate("text", 0.75, 0.5, label = auc_2) +
annotate("text", 0.75, 0.45, label = auc_5) +
#annotate("text", 0.75, 0.4, label = auc_10) +
ggtitle("Lasso Model\n7-fold Cross Validation\nMin-Max Normalization")
gPRC
pdf("clean_AUC_curated_4.18.pdf", height = 5, width = 10)
grid.arrange(gROC, gPRC, nrow = 1)
dev.off()
pdf("fig/fig_5B_4.18.pdf", height = 5, width = 5)
gROC
dev.off()
all_list <- list()
counter = 1
uniqs <- unique(ssfort_total$modType)
for( i in 1:length(uniqs)){
curr <- subset(ssfort_total, modType == uniqs[i])
glist=list()
for ( j in c(2,5)){
curr2 <- subset(curr, Year == j)
auc_c <- subset(curr2, Basis == "curated12" & curvetype == "ROC")$AUC[1]
auc_i <- subset(curr2, Basis == "immunoStates" & curvetype == "ROC")$AUC[1]
auc_l <- subset(curr2, Basis == "LM22" & curvetype == "ROC")$AUC[1]
#test <- subset(curr2, Basis == "curated12" & curvetype == "ROC")
#roc <- roc.curve(scores.class0 = test$y, scores.class1 = test$x, curve = T)
#plot(roc)
# PR Curve
#pr <- pr.curve(scores.class0 = test$y, scores.class1 = test$x, curve = T)
#plot(pr)
gROC <- ggplot(subset(curr2, curvetype=="ROC"), aes(x=x, y=y, color = Basis)) +
geom_line() +
annotate("text", 0.75, 0.55, label = auc_c) +
annotate("text", 0.75, 0.5, label = auc_i) +
annotate("text", 0.75, 0.45, label = auc_l) +
ggtitle(paste0(gsub(".rds", "", uniqs[i]), "_", j, "yrs"))
auc_c <- subset(curr2, Basis == "curated12" & curvetype == "PRC")$AUC[1]
auc_i <- subset(curr2, Basis == "immunoStates" & curvetype == "PRC")$AUC[1]
auc_l <- subset(curr2, Basis == "LM22" & curvetype == "PRC")$AUC[1]
gPRC <- ggplot(subset(curr2, curvetype=="PRC"), aes(x=x, y=y, color = Basis)) +
geom_line() +
annotate("text", 0.75, 0.35, label = auc_c) +
annotate("text", 0.75, 0.3, label = auc_i) +
annotate("text", 0.75, 0.25, label = auc_l) +
ggtitle(paste0(gsub(".rds", "", uniqs[i]), "_", j, "yrs"))
glist[[j]] <- grid.arrange(gROC, gPRC, nrow = 2)
all_list[[counter]] <- grid.arrange(gROC, gPRC, nrow = 2)
counter=+1
}
#newlist <- list(glist[[2]], glist[[5]], glist[[10]])
newlist <- list(glist[[2]], glist[[5]])
namer <- paste0("plots/", gsub(".rds", "", uniqs[i]), "_AUC_4.18.pdf")
pdf(namer, height = 10, width = 10)
pp = plot_grid(plotlist = newlist, nrow = 1)
print(pp)
dev.off()
}
all_list <- list()
counter = 1
uniqs <- unique(ssfort_total$modType)
for( i in 1:length(uniqs)){
curr <- subset(ssfort_total, modType == uniqs[i])
glist=list()
for ( j in c(2,5)){
curr2 <- subset(curr, Year == j)
auc_c <- subset(curr2, Basis == "curated12" & curvetype == "ROC")$AUC[1]
auc_i <- subset(curr2, Basis == "immunoStates" & curvetype == "ROC")$AUC[1]
auc_l <- subset(curr2, Basis == "LM22" & curvetype == "ROC")$AUC[1]
#test <- subset(curr2, Basis == "curated12" & curvetype == "ROC")
#roc <- roc.curve(scores.class0 = test$y, scores.class1 = test$x, curve = T)
#plot(roc)
# PR Curve
#pr <- pr.curve(scores.class0 = test$y, scores.class1 = test$x, curve = T)
#plot(pr)
gROC <- ggplot(subset(curr2, curvetype=="ROC"), aes(x=x, y=y, color = Basis)) +
geom_line() +
annotate("text", 0.75, 0.55, label = auc_c) +
annotate("text", 0.75, 0.5, label = auc_i) +
annotate("text", 0.75, 0.45, label = auc_l) +
ggtitle(paste0(gsub(".rds", "", uniqs[i]), "_", j, "yrs"))
auc_c <- subset(curr2, Basis == "curated12" & curvetype == "PRC")$AUC[1]
auc_i <- subset(curr2, Basis == "immunoStates" & curvetype == "PRC")$AUC[1]
auc_l <- subset(curr2, Basis == "LM22" & curvetype == "PRC")$AUC[1]
gPRC <- ggplot(subset(curr2, curvetype=="PRC"), aes(x=x, y=y, color = Basis)) +
geom_line() +
annotate("text", 0.75, 0.35, label = auc_c) +
annotate("text", 0.75, 0.3, label = auc_i) +
annotate("text", 0.75, 0.25, label = auc_l) +
ggtitle(paste0(gsub(".rds", "", uniqs[i]), "_", j, "yrs"))
glist[[j]] <- grid.arrange(gROC, gPRC, nrow = 2)
all_list[[counter]] <- grid.arrange(gROC, gPRC, nrow = 2)
counter=+1
}
#newlist <- list(glist[[2]], glist[[5]], glist[[10]])
newlist <- list(glist[[2]], glist[[5]])
namer <- paste0("plots/", gsub(".rds", "", uniqs[i]), "_AUC_4.18.pdf")
pdf(namer, height = 10, width = 12)
pp = plot_grid(plotlist = newlist, nrow = 1)
print(pp)
dev.off()
}
all_list <- list()
counter = 1
uniqs <- unique(ssfort_total$modType)
for( i in 1:length(uniqs)){
curr <- subset(ssfort_total, modType == uniqs[i])
glist=list()
for ( j in c(2,5)){
curr2 <- subset(curr, Year == j)
auc_c <- subset(curr2, Basis == "curated12" & curvetype == "ROC")$AUC[1]
auc_i <- subset(curr2, Basis == "immunoStates" & curvetype == "ROC")$AUC[1]
auc_l <- subset(curr2, Basis == "LM22" & curvetype == "ROC")$AUC[1]
#test <- subset(curr2, Basis == "curated12" & curvetype == "ROC")
#roc <- roc.curve(scores.class0 = test$y, scores.class1 = test$x, curve = T)
#plot(roc)
# PR Curve
#pr <- pr.curve(scores.class0 = test$y, scores.class1 = test$x, curve = T)
#plot(pr)
gROC <- ggplot(subset(curr2, curvetype=="ROC"), aes(x=x, y=y, color = Basis)) +
geom_line() +
annotate("text", 0.75, 0.55, label = auc_c) +
annotate("text", 0.75, 0.5, label = auc_i) +
annotate("text", 0.75, 0.45, label = auc_l) +
ggtitle(paste0(gsub(".rds", "", uniqs[i]), "_", j, "yrs"))
auc_c <- subset(curr2, Basis == "curated12" & curvetype == "PRC")$AUC[1]
auc_i <- subset(curr2, Basis == "immunoStates" & curvetype == "PRC")$AUC[1]
auc_l <- subset(curr2, Basis == "LM22" & curvetype == "PRC")$AUC[1]
gPRC <- ggplot(subset(curr2, curvetype=="PRC"), aes(x=x, y=y, color = Basis)) +
geom_line() +
annotate("text", 0.75, 0.35, label = auc_c) +
annotate("text", 0.75, 0.3, label = auc_i) +
annotate("text", 0.75, 0.25, label = auc_l) +
ggtitle(paste0(gsub(".rds", "", uniqs[i]), "_", j, "yrs"))
glist[[j]] <- grid.arrange(gROC, gPRC, nrow = 2)
all_list[[counter]] <- grid.arrange(gROC, gPRC, nrow = 2)
counter=+1
}
#newlist <- list(glist[[2]], glist[[5]], glist[[10]])
newlist <- list(glist[[2]], glist[[5]])
namer <- paste0("plots/", gsub(".rds", "", uniqs[i]), "_AUC_4.18.pdf")
pdf(namer, height = 10, width = 14)
pp = plot_grid(plotlist = newlist, nrow = 1)
print(pp)
dev.off()
}
all_list <- list()
counter = 1
uniqs <- unique(ssfort_total$modType)
for( i in 1:length(uniqs)){
curr <- subset(ssfort_total, modType == uniqs[i])
glist=list()
for ( j in c(2,5)){
curr2 <- subset(curr, Year == j)
auc_c <- subset(curr2, Basis == "curated12" & curvetype == "ROC")$AUC[1]
auc_i <- subset(curr2, Basis == "immunoStates" & curvetype == "ROC")$AUC[1]
auc_l <- subset(curr2, Basis == "LM22" & curvetype == "ROC")$AUC[1]
#test <- subset(curr2, Basis == "curated12" & curvetype == "ROC")
#roc <- roc.curve(scores.class0 = test$y, scores.class1 = test$x, curve = T)
#plot(roc)
# PR Curve
#pr <- pr.curve(scores.class0 = test$y, scores.class1 = test$x, curve = T)
#plot(pr)
gROC <- ggplot(subset(curr2, curvetype=="ROC"), aes(x=x, y=y, color = Basis)) +
geom_line() +
annotate("text", 0.75, 0.55, label = auc_c) +
annotate("text", 0.75, 0.5, label = auc_i) +
annotate("text", 0.75, 0.45, label = auc_l) +
ggtitle(paste0(gsub(".rds", "", uniqs[i]), "_", j, "yrs"))
auc_c <- subset(curr2, Basis == "curated12" & curvetype == "PRC")$AUC[1]
auc_i <- subset(curr2, Basis == "immunoStates" & curvetype == "PRC")$AUC[1]
auc_l <- subset(curr2, Basis == "LM22" & curvetype == "PRC")$AUC[1]
gPRC <- ggplot(subset(curr2, curvetype=="PRC"), aes(x=x, y=y, color = Basis)) +
geom_line() +
annotate("text", 0.75, 0.35, label = auc_c) +
annotate("text", 0.75, 0.3, label = auc_i) +
annotate("text", 0.75, 0.25, label = auc_l) +
ggtitle(paste0(gsub(".rds", "", uniqs[i]), "_", j, "yrs"))
glist[[j]] <- grid.arrange(gROC, gPRC, nrow = 2)
all_list[[counter]] <- grid.arrange(gROC, gPRC, nrow = 2)
counter=+1
}
#newlist <- list(glist[[2]], glist[[5]], glist[[10]])
newlist <- list(glist[[2]], glist[[5]])
namer <- paste0("plots/", gsub(".rds", "", uniqs[i]), "_AUC_4.18.pdf")
pdf(namer, height = 8, width = 12)
pp = plot_grid(plotlist = newlist, nrow = 1)
print(pp)
dev.off()
}
args = commandArgs(trailingOnly=TRUE)
library(caret)
#library(preprocessCore)
#library(data.table)
#library(reshape)
#library(circlize)
#library(TCGA2STAT)
library(ROCR)
library(plotROC)
library(randomForest)
library(ComplexHeatmap)
library(circlize)
normalize <- function(x)
{
return((x- min(x)) /(max(x)-min(x)))
}
setwd("/Users/devlij03/Google Drive/Png/cooper/PNAS_manuscript/int/glioma/")
#
####### for each cancer
#cancer_files <- list.files("genesymbols", full.names = T)
#cancer_files <- "genesymbols/Glioma_genesymbols.txt"
cancer_files <- args[1]
#cancer_metadata <- list.files("metadata", full.names=T)
cancer_metadata <- args[2]
#cancer_metadata <- "metadata/Glioma_metadata.txt"
sig_matrix <- args[3]
#sig_matrix <- c("curated_basis12.txt")
out_dir <- args[4]
CV <- 7
surv_num <- as.numeric(args[5])
f = 2
trains_list <- c("glioma_train_list2yr.txt","glioma_train_list5yr.txt","glioma_train_list10yr.txt")
tests_list <- c("glioma_test_list2yr.txt","glioma_test_list5yr.txt","glioma_test_list10yr.txt")
results <- data.frame(cancer_type = NA, test = NA, norm = NA, Survival = NA,
trainSetSize = NA, TrainAccuracy = NA, TrainAUC=NA,
testSetSize=NA, truePos = NA, falsePos = NA, falseNeg = NA, trueNeg = NA,
TestAccuracy = NA, Sensitivity = NA, Specificity = NA, Precision = NA,
Recall = NA, BalancedAccuracy = NA, TestAUC = NA)
current_cancer <- gsub("_genesymbols\\.txt", "", basename(cancer_files))
message <- paste0("Working on ", current_cancer, "...")
print(message)
### load cancer data and subset for genes in our signature!
cancer_df <- read.table(cancer_files, header=T)
cancer_files
cancer_files <- "genesymbols/Glioma_genesymbols.txt"
cancer_metadata <- "metadata/Glioma_metadata.txt"
sig_matrix <- c("curated_basis12.txt")
trains_list <- c("glioma_train_list2yr.txt","glioma_train_list5yr.txt","glioma_train_list10yr.txt")
tests_list <- c("glioma_test_list2yr.txt","glioma_test_list5yr.txt","glioma_test_list10yr.txt")
results <- data.frame(cancer_type = NA, test = NA, norm = NA, Survival = NA,
trainSetSize = NA, TrainAccuracy = NA, TrainAUC=NA,
testSetSize=NA, truePos = NA, falsePos = NA, falseNeg = NA, trueNeg = NA,
TestAccuracy = NA, Sensitivity = NA, Specificity = NA, Precision = NA,
Recall = NA, BalancedAccuracy = NA, TestAUC = NA)
current_cancer <- gsub("_genesymbols\\.txt", "", basename(cancer_files))
message <- paste0("Working on ", current_cancer, "...")
print(message)
### load cancer data and subset for genes in our signature!
cancer_df <- read.table(cancer_files, header=T)
X <- read.table(sig_matrix,header=T,sep="\t")
basis <- unique(as.character(X$GeneSymbol))
cancer_df <- subset(cancer_df, GeneSymbol %in% basis)
colnames(cancer_df) <- gsub("\\.", "-", colnames(cancer_df))
colnames(cancer_df) <- make.unique(substring(colnames(cancer_df), 0, 12))
rownames(cancer_df) <- cancer_df$GeneSymbol
cancer_df <- cancer_df[,-1]
cancer_meta <- read.table(cancer_metadata, header=T, sep='\t')
rownames(cancer_meta) <- make.unique(substring(cancer_meta$id, 0, 12))
cancer_meta$orig_vital <- cancer_meta$vitalstatus
new_vital <- cancer_meta$vitalstatus
new_vital[cancer_meta$daystodeath > 365*surv_num] <- 0
cancer_meta$newvital <- new_vital
surv_num
surv_num=2
cancer_df <- subset(cancer_df, GeneSymbol %in% basis)
colnames(cancer_df) <- gsub("\\.", "-", colnames(cancer_df))
colnames(cancer_df) <- make.unique(substring(colnames(cancer_df), 0, 12))
rownames(cancer_df) <- cancer_df$GeneSymbol
cancer_df <- cancer_df[,-1]
cancer_meta <- read.table(cancer_metadata, header=T, sep='\t')
rownames(cancer_meta) <- make.unique(substring(cancer_meta$id, 0, 12))
cancer_meta$orig_vital <- cancer_meta$vitalstatus
new_vital <- cancer_meta$vitalstatus
new_vital[cancer_meta$daystodeath > 365*surv_num] <- 0
cancer_meta$newvital <- new_vital
###
cancer_df <- read.table(cancer_files, header=T)
X <- read.table(sig_matrix,header=T,sep="\t")
basis <- unique(as.character(X$GeneSymbol))
cancer_df <- subset(cancer_df, GeneSymbol %in% basis)
colnames(cancer_df) <- gsub("\\.", "-", colnames(cancer_df))
colnames(cancer_df) <- make.unique(substring(colnames(cancer_df), 0, 12))
rownames(cancer_df) <- cancer_df$GeneSymbol
cancer_df <- cancer_df[,-1]
cancer_meta <- read.table(cancer_metadata, header=T, sep='\t')
rownames(cancer_meta) <- make.unique(substring(cancer_meta$id, 0, 12))
cancer_meta$orig_vital <- cancer_meta$vitalstatus
new_vital <- cancer_meta$vitalstatus
new_vital[cancer_meta$daystodeath > 365*surv_num] <- 0
cancer_meta$newvital <- new_vital
###
### perfect class balance
## or not
cancer_meta <- cancer_meta
cancer_df <- cancer_df
feat_heat <- data.frame(Genes = rownames(cancer_df))
glist <- list()
counter = 1
test_read <- tests_list[grep(surv_num, tests_list)]
test_group <- as.character(read.table(test_read, T, '\t')$Sample)
train_read <- trains_list[grep(surv_num, trains_list)]
train_group <- as.character(read.table(train_read, T, '\t')$Sample)
dim(test_group)
length(tets_grouo)
length(tets_group)
length(test_group)
length(train_group)
table(train_class)
test_meta <- cancer_meta[test_group,]
train_meta <- cancer_meta[train_group,]
cancer_test <- cancer_df[,test_group]
test_class <- test_meta$newvital
cancer_train <- cancer_df[,train_group]
train_class <- train_meta$newvital
table(train_class)
table(test_class)
surv_num=5
trains_list <- c("glioma_train_list2yr.txt","glioma_train_list5yr.txt","glioma_train_list10yr.txt")
tests_list <- c("glioma_test_list2yr.txt","glioma_test_list5yr.txt","glioma_test_list10yr.txt")
results <- data.frame(cancer_type = NA, test = NA, norm = NA, Survival = NA,
trainSetSize = NA, TrainAccuracy = NA, TrainAUC=NA,
testSetSize=NA, truePos = NA, falsePos = NA, falseNeg = NA, trueNeg = NA,
TestAccuracy = NA, Sensitivity = NA, Specificity = NA, Precision = NA,
Recall = NA, BalancedAccuracy = NA, TestAUC = NA)
current_cancer <- gsub("_genesymbols\\.txt", "", basename(cancer_files))
message <- paste0("Working on ", current_cancer, "...")
print(message)
### load cancer data and subset for genes in our signature!
cancer_df <- read.table(cancer_files, header=T)
X <- read.table(sig_matrix,header=T,sep="\t")
basis <- unique(as.character(X$GeneSymbol))
cancer_df <- subset(cancer_df, GeneSymbol %in% basis)
colnames(cancer_df) <- gsub("\\.", "-", colnames(cancer_df))
colnames(cancer_df) <- make.unique(substring(colnames(cancer_df), 0, 12))
rownames(cancer_df) <- cancer_df$GeneSymbol
cancer_df <- cancer_df[,-1]
cancer_meta <- read.table(cancer_metadata, header=T, sep='\t')
rownames(cancer_meta) <- make.unique(substring(cancer_meta$id, 0, 12))
cancer_meta$orig_vital <- cancer_meta$vitalstatus
new_vital <- cancer_meta$vitalstatus
new_vital[cancer_meta$daystodeath > 365*surv_num] <- 0
cancer_meta$newvital <- new_vital
###
# fix class imbalance
#cancer0 <- subset(cancer_meta, new_vital == 0)
#cancer1 <- subset(cancer_meta, new_vital == 1)
#keep0 <- as.character(sample(cancer0$id, nrow(cancer1)))
#cancer0_small <- cancer0[keep0,]
#cancer_meta_new <- rbind(cancer0_small, cancer1)
#cancer_meta_new <- cancer_meta_new[sample(1:nrow(cancer_meta_new)),]
#cancer_df_new <- cancer_df[,rownames(cancer_meta_new)]
### perfect class balance
## or not
cancer_meta <- cancer_meta
cancer_df <- cancer_df
feat_heat <- data.frame(Genes = rownames(cancer_df))
glist <- list()
counter = 1
##
# split into test and train 80/20
#test_group <- as.character(sample(cancer_meta$id, ceiling(nrow(cancer_meta)*0.2)))
#train_group <- colnames(cancer_df)[!colnames(cancer_df) %in% test_group]
test_read <- tests_list[grep(surv_num, tests_list)]
test_group <- as.character(read.table(test_read, T, '\t')$Sample)
train_read <- trains_list[grep(surv_num, trains_list)]
train_group <- as.character(read.table(train_read, T, '\t')$Sample)
test_meta <- cancer_meta[test_group,]
train_meta <- cancer_meta[train_group,]
cancer_test <- cancer_df[,test_group]
test_class <- test_meta$newvital
cancer_train <- cancer_df[,train_group]
train_class <- train_meta$newvital
length(train_group)
table(train_class)
length(test_group)
table(test_class)
### rename
data.train <- cancer_train
data.test <- cancer_test
data_train_none <- data.train
data_test_none <- data.test
data_train_norm <- data.frame(t(apply(data.train, 1, normalize))) #min max between 0-1
data_train_norm[is.na(data_train_norm)] <- 0
data_test_norm <- data.frame(t(apply(data.test, 1, normalize))) #min max between 0-1
data_test_norm[is.na(data_test_norm)] <- 0
View(data_test_norm)
